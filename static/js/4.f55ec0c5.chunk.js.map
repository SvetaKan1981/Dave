{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","name","DialogItem","path","id","className","s","dialog","active","to","Message","message","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,8GCKxIC,EAAcC,YAAiB,IAgBtBC,cAAU,CAAEC,KAAM,2BAAlBD,EAdS,SAACE,GACrB,OACI,0BAAMC,SAAUD,EAAME,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACdC,SAAU,CAACC,IAAUX,GACrBY,YAAY,qBAAqBC,KAAK,oBAE/C,6BACK,6C,0BCHDC,EAVI,SAACV,GAClB,IAAIW,EAAO,YAAcX,EAAMY,GAC/B,OACE,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACjC,kBAAC,IAAD,CAASC,GAAIN,GAAOX,EAAMS,QCEjBS,EANC,SAAClB,GACf,OACE,yBAAKa,UAAWC,IAAEK,SAAUnB,EAAMmB,UC0BvBC,EAzBC,SAACpB,GACf,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAMkB,IAAKD,EAAEd,GAAIA,GAAIc,EAAEd,QACpFgB,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASX,QAASW,EAAEX,QAASQ,IAAKG,EAAElB,QAC9DS,EAAMU,eAK3B,OAAK/B,EAAMgC,OAEL,yBAAKnB,UAAWC,IAAEU,SAChB,yBAAKX,UAAWC,IAAEmB,cACfV,GAEH,yBAAKV,UAAWC,IAAEe,UAClB,6BAAMD,IAER,kBAAC,EAAD,CAAgB3B,SAZF,SAACiC,GACnBlC,EAAMmC,YAAYD,EAAOH,oBAED,kBAAC,IAAD,CAAUd,GAAI,Y,wCCZtCmB,EAA6B,SAACf,GAAD,MAAY,CACzCW,OAAQX,EAAMgB,KAAKL,S,OCiBrBM,sBACEC,aAlBJ,SAAyBlB,GACvB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACkB,GACxB,MAAO,CACLL,YAAe,SAACJ,GACdS,EAASC,YAAmBV,UDNF,SAACW,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAK5C,MAAMgC,OACT,kBAACU,EAAcE,KAAK5C,OADI,kBAAC,IAAD,CAAUiB,GAAG,eAJT,GAEX4B,IAAMH,WAStC,OADqCH,YAAQH,EAARG,CAAoCI,KCI3EL,CAGElB","file":"static/js/4.f55ec0c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__E418t\",\"dialogsItems\":\"Dialogs_dialogsItems__PSUyV\",\"active\":\"Dialogs_active__3KI_S\",\"messages\":\"Dialogs_messages__MzkDa\"};","import React from 'react';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Field, reduxForm  } from 'redux-form';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n const AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                    validate={[required, maxLength50 ]}\r\n                    placeholder='Enter your message' name='newMessageBody' />\r\n            </div>\r\n           <div>\r\n                <button>Send</button>    \r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({ form: 'dialog-add-message-form' })(AddMessageForm);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + ' ' + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message}>{props.message}</div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} /> );    \r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  }\r\n  if (!props.isAuth) return <Redirect to={\"/login\"} / >;\r\n    return (\r\n        <div className={s.dialogs}>\r\n          <div className={s.dialogsItems}>\r\n            {dialogsElements}\r\n          </div>\r\n          <div className={s.messages}>\r\n          <div>{messagesElements}</div>\r\n        </div>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport RedirectComponent from './withAuthRedirect';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\nexport default RedirectComponent;","import { sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  };\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage:   (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default\r\n  compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n  )(Dialogs);"],"sourceRoot":""}